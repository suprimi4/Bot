services:
  app:
    image: suprimi4/crud-app:latest
    env_file:
      - .env
    container_name: backend-app-parent
    ports:
      - "9999:8080"
      - "8078:8078"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/${DB_NAME}
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - API_SECRET=${API_SECRET}
      - DADATA_CLIENT_TOKEN=${DADATA_TOKEN}
      - DADATA_CLIENT_SECRET=${DADATA_SECRET}
      - DADATA_API-URL=${DADATA_URL}
      - OPENROUTESERVICE_API_KEY=${ROUTE_KEY}
      - OPENROUTESERVICE_API_URL=${ROUTE_URL}
#    labels:
#      - "prometheus.scrape=true"
#      - "prometheus.port=8078"
#      - "prometheus.path=/actuator/prometheus"

  db:
    image: postgres:16.8
    restart: always
    container_name: db-cont-parent
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_grachev:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s

  bot:
    image: suprimi4/time_to_go_bot:latest
    env_file:
      - .env
    container_name: timeToGoBot-parent
    ports:
      - "8079:8079"
    depends_on:
      - app
    environment:
      - BOT_USERNAME=${TELEGRAM_BOT_USERNAME}
      - BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - API_URL=http://app:8080
#    labels:
#      - "prometheus.scrape=true"
#      - "prometheus.port=8079"
#      - "prometheus.path=/actuator/prometheus"

#  prometheus:
#    image: prom/prometheus
#    container_name: prometheus-parent
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./prometheus:/etc/prometheus
#      - prometheus_data:/prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#    depends_on:
#      - app
#      - bot
#
#  grafana:
#    image: grafana/grafana
#    container_name: grafana-parent
#    ports:
#      - "3000:3000"
#    volumes:
#      - grafana-storage:/var/lib/grafana
#    depends_on:
#      - prometheus

  kafka:
    image: apache/kafka:4.0.0
    container_name: kafka-server
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,EXTERNAL://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data


volumes:
  postgres_data_grachev:
  kafka-data:
#  prometheus_data:
#  grafana-storage: